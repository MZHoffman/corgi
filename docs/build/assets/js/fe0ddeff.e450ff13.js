"use strict";(self.webpackChunk_corgi_docs=self.webpackChunk_corgi_docs||[]).push([[531],{5318:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>u});var n=t(7378);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function r(e,a){if(null==e)return{};var t,n,o=function(e,a){if(null==e)return{};var t,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=n.createContext({}),s=function(e){var a=n.useContext(c),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},p=function(e){var a=s(e.components);return n.createElement(c.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),m=s(t),u=o,g=m["".concat(c,".").concat(u)]||m[u]||d[u]||l;return t?n.createElement(g,i(i({ref:a},p),{},{components:t})):n.createElement(g,i({ref:a},p))}));function u(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var l=t.length,i=new Array(l);i[0]=m;var r={};for(var c in a)hasOwnProperty.call(a,c)&&(r[c]=a[c]);r.originalType=e,r.mdxType="string"==typeof e?e:o,i[1]=r;for(var s=2;s<l;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8468:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>r,toc:()=>s});var n=t(5773),o=(t(7378),t(5318));const l={sidebar_position:2},i="Locale data",r={unversionedId:"localization/data",id:"localization/data",title:"Locale data",description:'Static site data for each locale is grouped into two general categories: the "global" data and the "page" data. Global data refers to site-wide content\u2014things like navigation menus, footers, and so on\u2014while page data refers to page-specific content\u2014things like a homepage header, or a biography for an "about" page.',source:"@site/docs/localization/data.mdx",sourceDirName:"localization",slug:"/localization/data",permalink:"/docs/localization/data",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Locale settings",permalink:"/docs/localization/configuration"},next:{title:"useLocale() hook",permalink:"/docs/localization/use-locale-hook"}},c={},s=[{value:"Locale data compilation",id:"locale-data-compilation",level:2},{value:"<code>globals</code> example",id:"globals-example",level:2},{value:"<code>page</code> example",id:"page-example",level:2}],p={toc:s};function d(e){let{components:a,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"locale-data"},"Locale data"),(0,o.kt)("p",null,'Static site data for each locale is grouped into two general categories: the "global" data and the "page" data. Global data refers to site-wide content\u2014things like navigation menus, footers, and so on\u2014while page data refers to page-specific content\u2014things like a homepage header, or a biography for an "about" page.'),(0,o.kt)("p",null,"All static locale data lives within the ",(0,o.kt)("inlineCode",{parentName:"p"},"src/locales/")," directory, and is grouped into these two categories. You can treat the ",(0,o.kt)("inlineCode",{parentName:"p"},"globals")," directory as a reserved directory name, as all global (site-wide) data is compiled from within it. All other directories here, however, are page-level data directories which should match each page's filename as it exists in the ",(0,o.kt)("inlineCode",{parentName:"p"},"src/pages/")," directory."),(0,o.kt)("p",null,"Within both ",(0,o.kt)("inlineCode",{parentName:"p"},"src/locales/globals/")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"src/locales/<page-name>/"),", should live YAML files containing the actual locale data. Each YAML file's name should be the locale string as specified in the ",(0,o.kt)("a",{parentName:"p",href:"./configuration#locales"},"locale config"),", with a ",(0,o.kt)("inlineCode",{parentName:"p"},".yml")," extension."),(0,o.kt)("p",null,"Here is an example file tree, containing global data as well as data for two pages\u2014all containing content for three locales:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},".\n\u2514\u2500\u2500 src/\n    \u2514\u2500\u2500 locales/\n        \u251c\u2500\u2500 globals/\n        \u2502   \u251c\u2500\u2500 en.yml\n        \u2502   \u251c\u2500\u2500 es.yml\n        \u2502   \u2514\u2500\u2500 fr.yml\n        \u251c\u2500\u2500 home/\n        \u2502   \u251c\u2500\u2500 en.yml\n        \u2502   \u251c\u2500\u2500 es.yml\n        \u2502   \u2514\u2500\u2500 fr.yml\n        \u2514\u2500\u2500 about/\n            \u251c\u2500\u2500 en.yml\n            \u251c\u2500\u2500 es.yml\n            \u2514\u2500\u2500 fr.yml\n")),(0,o.kt)("h2",{id:"locale-data-compilation"},"Locale data compilation"),(0,o.kt)("p",null,"Under the hood, all of these files get compiled into two objects\u2014",(0,o.kt)("inlineCode",{parentName:"p"},"globals")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"page"),"\u2014and are then passed to each page as props. This process is done via Next JS' ",(0,o.kt)("inlineCode",{parentName:"p"},"getStaticProps")," convention. The ",(0,o.kt)("a",{parentName:"p",href:"./use-locale-hook"},(0,o.kt)("inlineCode",{parentName:"a"},"useLocale"))," hook is a convenient way to work with this data from ",(0,o.kt)("em",{parentName:"p"},"any")," functional React component in your project."),(0,o.kt)("h2",{id:"globals-example"},(0,o.kt)("inlineCode",{parentName:"h2"},"globals")," example"),(0,o.kt)("p",null,"An example ",(0,o.kt)("inlineCode",{parentName:"p"},"globals")," YAML file for the ",(0,o.kt)("inlineCode",{parentName:"p"},'"en"')," locale:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title="/src/locales/globals/en.yml"',title:'"/src/locales/globals/en.yml"'},"meta:\n  title: My Cool Web App\n  description: The site-wide meta description.\n  og_alt: Description of the og image.\n\nnav:\n  label: Main site navigation\n  items:\n    - id: home\n      label: Home\n    - id: about\n      label: About Us\n    - id: contact\n      label: Get in touch\n\nfooter: \xa9 Company Name.\n")),(0,o.kt)("p",null,"As mentioned, that data gets compiled into a page-level prop called ",(0,o.kt)("inlineCode",{parentName:"p"},"globals"),", for the current page and locale. Here's an example that uses that data (via ",(0,o.kt)("a",{parentName:"p",href:"./use-locale-hook"},(0,o.kt)("inlineCode",{parentName:"a"},"useLocale")),") from within an imaginary ",(0,o.kt)("inlineCode",{parentName:"p"},"<Navigation />")," component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import useLocale from "../../hooks/use-locale"\n\nconst Navigation = () => {\n  const { globals } = useLocale()\n\n  return (\n    <nav aria-labelledby="nav-label">\n      <span id="nav-label" className="visually-hidden">{globals.nav.label}</span>\n      <ul>\n        {globals.nav.items.map(item => (\n          <li key={item.id}>{item.label}</li>\n        )}\n      </ul>\n    </nav>\n  )\n}\n\nexport default Navigation\n')),(0,o.kt)("h2",{id:"page-example"},(0,o.kt)("inlineCode",{parentName:"h2"},"page")," example"),(0,o.kt)("p",null,"An example ",(0,o.kt)("inlineCode",{parentName:"p"},"about")," page YAML file for the ",(0,o.kt)("inlineCode",{parentName:"p"},'"en"')," locale:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title="/src/locales/about/en.yml"',title:'"/src/locales/about/en.yml"'},"meta:\n  title: About Us\n  description: Our team is pretty cool. We do cool things.\n\ntitle: About Us\n\nbio: Aliqua irure sint ea amet duis exercitation labore non occaecat velit voluptate. Ipsum fugiat officia irure consequat laborum in incididunt sit magna ex deserunt reprehenderit veniam ea.\n")),(0,o.kt)("p",null,"This data gets compiled into a page-level prop called ",(0,o.kt)("inlineCode",{parentName:"p"},"page"),", for the current page and locale. Here's an example that uses that data (via ",(0,o.kt)("a",{parentName:"p",href:"./use-locale-hook"},(0,o.kt)("inlineCode",{parentName:"a"},"useLocale")),") from within an imaginary About page component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import useLocale from "../../hooks/use-locale"\n\nconst AboutPage = () => {\n  const { page } = useLocale()\n\n  return (\n    <header aria-labelledby="about-title">\n      <h1 id="about-title">{page.title}</h1>\n    </header>\n    <main>\n      <p>{page.bio}</p>\n    </main>\n  )\n}\n\nexport default AboutPage\n')))}d.isMDXComponent=!0}}]);