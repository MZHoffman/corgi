"use strict";(self.webpackChunk_wethegit_corgi_docs=self.webpackChunk_wethegit_corgi_docs||[]).push([[4285],{5318:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},k={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(n),m=a,d=c["".concat(p,".").concat(m)]||c[m]||k[m]||o;return n?r.createElement(d,l(l({ref:t},u),{},{components:n})):r.createElement(d,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1437:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>k,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=n(5773),a=(n(7378),n(5318));const o={description:"Returns the current CSS breakpoint."},l="useBreakpoints",i={unversionedId:"hooks/use-breakpoints",id:"hooks/use-breakpoints",title:"useBreakpoints",description:"Returns the current CSS breakpoint.",source:"@site/docs/hooks/use-breakpoints.mdx",sourceDirName:"hooks",slug:"/hooks/use-breakpoints",permalink:"/corgi/docs/hooks/use-breakpoints",draft:!1,tags:[],version:"current",frontMatter:{description:"Returns the current CSS breakpoint."},sidebar:"tutorialSidebar",previous:{title:"useAsync",permalink:"/corgi/docs/hooks/use-async"},next:{title:"useLocalStorage",permalink:"/corgi/docs/hooks/use-local-storage"}},p={},s=[{value:"Return value",id:"return-value",level:2},{value:"Usage",id:"usage",level:2}],u={toc:s};function k(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"usebreakpoints"},(0,a.kt)("inlineCode",{parentName:"h1"},"useBreakpoints")),(0,a.kt)("p",null,"Location: ",(0,a.kt)("inlineCode",{parentName:"p"},"/src/hooks/use-breakpoints.js")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"useBreakpoints")," hook provides us with the current breakpoint. This value is automatically updated on resize."),(0,a.kt)("h2",{id:"return-value"},"Return value"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useBreakpoints")," returns an object containing a handful of helpful values for working with media queries (breakpoints) and conditional rendering, among other uses. The mapping of breakpoints is as follows (see table below for details):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"1: small\n2: medium\n3: large\n4: xlarge\n5: xxlarge\n")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Value"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"BREAKPOINTS"),(0,a.kt)("td",{parentName:"tr",align:null},"Object"),(0,a.kt)("td",{parentName:"tr",align:null},"Mapping of breakpoint keys to their string values.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"breakpointIndex"),(0,a.kt)("td",{parentName:"tr",align:null},"Number"),(0,a.kt)("td",{parentName:"tr",align:null},"An integer representation of the current breakpoint.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"breakpointName"),(0,a.kt)("td",{parentName:"tr",align:null},"String"),(0,a.kt)("td",{parentName:"tr",align:null},"A string representation of the current breakpoint.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"mediumUp"),(0,a.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"Result of the expression ",(0,a.kt)("inlineCode",{parentName:"td"},"breakpontIndex > 1"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"mediumDown"),(0,a.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"Result of the expression ",(0,a.kt)("inlineCode",{parentName:"td"},"breakpontIndex < 3"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"largeUp"),(0,a.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"Result of the expression ",(0,a.kt)("inlineCode",{parentName:"td"},"breakpontIndex > 2"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"xlargeUp"),(0,a.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"Result of the expression ",(0,a.kt)("inlineCode",{parentName:"td"},"breakpontIndex > 3"))))),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import useBreakpoints from "@local/hooks/use-breakpoints";\n\nimport MyMobileDeviceComponent from "../somewhere"\nimport WildlyDifferentDesktopComponent from "../somewhere"\n\nconst MyComponent = () => {\n  const { breakpointIndex, breakpointName, BREAKPOINTS } = useBreakpoints()\n\n  console.log(breakpointName === BREAKPOINTS.small) // => logs true or false\n\n  return breakpointIndex < 3 ? (\n    <MyMobileDeviceComponent />\n  ) : (\n    <WildlyDifferentDesktopComponent />\n  )\n};\n')))}k.isMDXComponent=!0}}]);