"use strict";(self.webpackChunk_wethegit_corgi_docs=self.webpackChunk_wethegit_corgi_docs||[]).push([[581],{5318:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(7378);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=m(n),c=l,g=u["".concat(s,".").concat(c)]||u[c]||p[c]||r;return n?a.createElement(g,i(i({ref:t},d),{},{components:n})):a.createElement(g,i({ref:t},d))}));function c(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var m=2;m<r;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3843:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var a=n(5773),l=(n(7378),n(5318));const r={sidebar_position:4},i="Flex-grid system",o={unversionedId:"styles/grid-system",id:"styles/grid-system",title:"Flex-grid system",description:"The flexbox-based grid layout system in corgi is based on the concept of rows and columns. A row acts as a flex container, while a column is a flex child. By default, the flex styles are not applied until the medium-up breakpoint (see responsive-breakpoints). Despite this, other .row and .column style delarations do apply (such as padding, for example).",source:"@site/docs/styles/grid-system.mdx",sourceDirName:"styles",slug:"/styles/grid-system",permalink:"/corgi/docs/styles/grid-system",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"@media queries",permalink:"/corgi/docs/styles/responsive-breakpoints"},next:{title:"Images",permalink:"/corgi/docs/category/images"}},s={},m=[{value:"Configuration",id:"configuration",level:2},{value:"Basic usage",id:"basic-usage",level:2},{value:"Breakpoints",id:"breakpoints",level:2},{value:"Nested columns",id:"nested-columns",level:2},{value:"Available classNames",id:"available-classnames",level:2},{value:"SCSS Helpers",id:"scss-helpers",level:2},{value:"grid-calc",id:"grid-calc",level:3}],d={toc:m};function p(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"flex-grid-system"},"Flex-grid system"),(0,l.kt)("p",null,"The flexbox-based grid layout system in corgi is based on the concept of rows and columns. A row acts as a flex container, while a column is a flex child. By default, the ",(0,l.kt)("strong",{parentName:"p"},"flex")," styles are not applied until the ",(0,l.kt)("inlineCode",{parentName:"p"},"medium-up")," breakpoint (see ",(0,l.kt)("a",{parentName:"p",href:"/corgi/docs/styles/responsive-breakpoints"},"responsive-breakpoints"),"). Despite this, other ",(0,l.kt)("inlineCode",{parentName:"p"},".row")," and ",(0,l.kt)("inlineCode",{parentName:"p"},".column")," style delarations ",(0,l.kt)("em",{parentName:"p"},"do")," apply (such as padding, for example)."),(0,l.kt)("p",null,"This flex layout system also provides CSS modifier classes which allow the configuration of elements to different column sizes at different responsive breakpoints."),(0,l.kt)("admonition",{title:"Flex-grid bookmarklet",type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"This bookmarklet provides a helpful visual overlay of the flex-grid system, directly in your browser, and is useful for learning or debugging: ",(0,l.kt)("a",{href:"https://codepen.io/team/wtc/pen/BEjzmW",target:"_blank",rel:"noreferrer noopener"},"flex-grid bookmarklet"))),(0,l.kt)("h2",{id:"configuration"},"Configuration"),(0,l.kt)("p",null,"Out of the box, corgi provides a responsive flex-grid system with a max-width of 1440px wide, and contains 12 columns with a 24px gutter between each."),(0,l.kt)("p",null,"The grid can be configured in ",(0,l.kt)("inlineCode",{parentName:"p"},"/src/styles/settings/_settings-layout.scss"),". If you are using Sketch, layout settings in Sketch should be configured to match with the flex layout configuration. The layout settings can be found under ",(0,l.kt)("inlineCode",{parentName:"p"},"View > Canvas > Layout Settings"),"."),(0,l.kt)("p",null,"The following options are available:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"SCSS variable"),(0,l.kt)("th",{parentName:"tr",align:null},"Default value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"$total-width"),(0,l.kt)("td",{parentName:"tr",align:null},"1392px"),(0,l.kt)("td",{parentName:"tr",align:null},"This is the maximum width of a ",(0,l.kt)("inlineCode",{parentName:"td"},".row")," grid system, less the left and right gutters.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"$number-of-columns"),(0,l.kt)("td",{parentName:"tr",align:null},"12"),(0,l.kt)("td",{parentName:"tr",align:null},"The number of columns to include.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"$gutter-width"),(0,l.kt)("td",{parentName:"tr",align:null},"16px"),(0,l.kt)("td",{parentName:"tr",align:null},"The width of the gutters at the ",(0,l.kt)("inlineCode",{parentName:"td"},"small")," breakpoint, in pixels.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"$gutter-width-medium-up"),(0,l.kt)("td",{parentName:"tr",align:null},"24px"),(0,l.kt)("td",{parentName:"tr",align:null},"The width of the gutters, at the ",(0,l.kt)("inlineCode",{parentName:"td"},"medium-up")," breakpoint, in pixels.")))),(0,l.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,l.kt)("p",null,"The simplest way to use the grid in practice is to create a row and, within that row, create some columns:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<div class="row">\n  <div class="column column--4">\n    <p>I\'m a 4 column element</p>\n  </div>\n  <div class="column column--4">\n    <p>I\'m another 4 column element</p>\n  </div>\n  <div class="column column--4">\n    <p>I\'m a third 4 column element, together we add up to 12 columns</p>\n  </div>\n</div>\n')),(0,l.kt)("h2",{id:"breakpoints"},"Breakpoints"),(0,l.kt)("p",null,"For layouts whose column spans change on a per-breakpoint basis, you can use breakpoint-specific classs. For more information on responsive breakpoints in corgi, see the ",(0,l.kt)("a",{parentName:"p",href:"/corgi/docs/styles/responsive-breakpoints"},"responsive breakpoints")," docs."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<div class="row">\n  <div class="column column--10 column-xlarge--6">\n    <p>I\'m 10 columns at medium and large and 6 columns from xlarge and up</p>\n  </div>\n  <div class="column column--2 column-xlarge--6">\n    <p>I\'m 2 columns at medium and large and 6 columns from xlarge and up</p>\n  </div>\n</div>\n')),(0,l.kt)("p",null,"This example will provide a grid row that contains 2 columns. At medium and large the first element will be 10 columns wide and the second 2, while at xlarge+ they will both be 6 columns wide."),(0,l.kt)("admonition",{title:"Mobile-first",type:"info"},(0,l.kt)("p",{parentName:"admonition"},'These breakpoints employ a mobile-first philosophy \u2014 that is, standard "column--X" classes will work for all breakpoints from ',(0,l.kt)("inlineCode",{parentName:"p"},"medium"),' and above; "column-large--X" classes will work for all breakpoints from ',(0,l.kt)("inlineCode",{parentName:"p"},"large"),' and above; "column-xlarge--X" classes will work for all breakpoints from ',(0,l.kt)("inlineCode",{parentName:"p"},"xlarge")," and above; and so on.")),(0,l.kt)("h2",{id:"nested-columns"},"Nested columns"),(0,l.kt)("p",null,'It\'s also possible to nest rows and columns. This is particularly useful when you want to create another "instance" of a flex-grid layout ',(0,l.kt)("em",{parentName:"p"},"inside")," an existing ",(0,l.kt)("inlineCode",{parentName:"p"},".column")," element that spans, say, 10 columns."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<div class="row">\n  <div class="column column--10">\n    <div class="row">\n      <div class="column column--deep column--6">\n        <p>I\'m a nested element that spans 6 columns of my parent row.</p>\n      </div>\n      <div class="column column--deep column--6">\n        <p>I\'m a nested element that spans 6 columns of my parent row.</p>\n      </div>\n    </div>\n\n    <div class="column column--2">\n      <p>I\'m an element that spans 2 columns</p>\n    </div>\n  </div>\n</div>\n')),(0,l.kt)("p",null,"This code creates a 10-column element that contains two 6-column elements. Note that the width of a column within a ",(0,l.kt)("em",{parentName:"p"},"nested")," row will be relative to that columns's closest parent ",(0,l.kt)("inlineCode",{parentName:"p"},".row")," (because they're percentage-based widths)."),(0,l.kt)("p",null,"Note the ",(0,l.kt)("inlineCode",{parentName:"p"},'"column--deep"')," className on nested columns here. This removes default left and right padding which is necessary for non-nested columns. Nested rows behave similarly, but do not need an explicit className."),(0,l.kt)("h2",{id:"available-classnames"},"Available classNames"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"className"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"wrapper"),(0,l.kt)("td",{parentName:"tr",align:null},"Apply this to a container element when you want the maximum width and padding of a ",(0,l.kt)("inlineCode",{parentName:"td"},".row"),", but do ",(0,l.kt)("em",{parentName:"td"},"not")," want a flex layout.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"row"),(0,l.kt)("td",{parentName:"tr",align:null},"Allows an element to behave as a container in the flex layout system. Adds a max-width based on your ",(0,l.kt)("a",{parentName:"td",href:"#configuration"},"config"),", among other things. By default, elements within the row will be center-aligned horizontally.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"row--nowrap"),(0,l.kt)("td",{parentName:"tr",align:null},"Modifier. Ensures that immediate child elements do not wrap when they move beyond the maximum column count for a row.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"row--vertical-center"),(0,l.kt)("td",{parentName:"tr",align:null},"Modifier. Vertically centers immediate child elements of a ",(0,l.kt)("inlineCode",{parentName:"td"},".row"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"row--horizontal-uncenter"),(0,l.kt)("td",{parentName:"tr",align:null},"Modifier. Left-aligns immediate child elements of a ",(0,l.kt)("inlineCode",{parentName:"td"},".row"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"column"),(0,l.kt)("td",{parentName:"tr",align:null},"Base className for flex children of a ",(0,l.kt)("inlineCode",{parentName:"td"},".row"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"column--","<","number",">"),(0,l.kt)("td",{parentName:"tr",align:null},"Modifier. Creates an element that spans ",(0,l.kt)("inlineCode",{parentName:"td"},"<number>")," of columns. ",(0,l.kt)("inlineCode",{parentName:"td"},"<number>")," must be a whole-number, and between ",(0,l.kt)("inlineCode",{parentName:"td"},"1")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"$number-of-columns"),". Example: ",(0,l.kt)("inlineCode",{parentName:"td"},"column--10"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"column-large--","<","number",">"),(0,l.kt)("td",{parentName:"tr",align:null},"Modifier. Applies a specific column span to the ",(0,l.kt)("inlineCode",{parentName:"td"},"large-up")," media query.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"column-xlarge--","<","number",">"),(0,l.kt)("td",{parentName:"tr",align:null},"Modifier. Applies a specific column span to the ",(0,l.kt)("inlineCode",{parentName:"td"},"xlarge-up")," media query.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"column-xxlarge--","<","number",">"),(0,l.kt)("td",{parentName:"tr",align:null},"Modifier. Applies a specific column span to the ",(0,l.kt)("inlineCode",{parentName:"td"},"xxlarge-up")," media query.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"column--deep"),(0,l.kt)("td",{parentName:"tr",align:null},"Modifier. Removes gutters (left and right padding) from the ",(0,l.kt)("inlineCode",{parentName:"td"},".column"),". Used when nesting layout systems.")))),(0,l.kt)("h2",{id:"scss-helpers"},"SCSS Helpers"),(0,l.kt)("p",null,"In addition to providing classNames, the flex-grid system also provides some SCSS helper functions that are useful when you want to extend the layout system or create utility classNames of your own."),(0,l.kt)("h3",{id:"grid-calc"},"grid-calc"),(0,l.kt)("p",null,"Function. Returns a percentage that conforms to the number of columns provided. This is useful when trying to offset columns by a specific number of columns (via left or right margin, for example). The following example will add two columns worth of left margin."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scss",metastring:'title="grid-calc example"',title:'"grid-calc','example"':!0},'@use "../../styles/helpers/helpers-layout" as *;\n\n.my-element {\n  margin-left: grid-calc(2);\n}\n')))}p.isMDXComponent=!0}}]);