"use strict";(self.webpackChunk_wethegit_corgi_docs=self.webpackChunk_wethegit_corgi_docs||[]).push([[286],{5318:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var i=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(n),g=a,d=u["".concat(l,".").concat(g)]||u[g]||c[g]||o;return n?i.createElement(d,r(r({ref:t},m),{},{components:n})):i.createElement(d,r({ref:t},m))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var p=2;p<o;p++)r[p]=n[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8398:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var i=n(5773),a=(n(7378),n(5318));const o={},r="Image optimization",s={unversionedId:"images/image-optimization",id:"images/image-optimization",title:"Image optimization",description:'corgi can optimize and compresses images for you; allowing you to only have to worry about uploading a single, high-res ("2x" pixel density) image. This optimization process generates compressed versions of these 2x images, their 1x counterparts, and .webp versions if applicable.',source:"@site/docs/images/image-optimization.mdx",sourceDirName:"images",slug:"/images/image-optimization",permalink:"/corgi/docs/images/image-optimization",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Images",permalink:"/corgi/docs/category/images"},next:{title:"<Picture> component",permalink:"/corgi/docs/images/picture-component"}},l={},p=[{value:"Image source file location",id:"image-source-file-location",level:2},{value:"Image optimization output location",id:"image-optimization-output-location",level:2},{value:"Image formats",id:"image-formats",level:2},{value:"Image usage",id:"image-usage",level:2}],m={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"image-optimization"},"Image optimization"),(0,a.kt)("p",null,'corgi can optimize and compresses images for you; allowing you to only have to worry about uploading a single, high-res ("2x" pixel density) image. This optimization process generates compressed versions of these ',(0,a.kt)("inlineCode",{parentName:"p"},"2x")," images, their ",(0,a.kt)("inlineCode",{parentName:"p"},"1x")," counterparts, and ",(0,a.kt)("inlineCode",{parentName:"p"},".webp")," versions if applicable."),(0,a.kt)("h2",{id:"image-source-file-location"},"Image source file location"),(0,a.kt)("p",null,"To take advantage of corgi's image optimization, save your image ",(0,a.kt)("em",{parentName:"p"},"source")," files in the ",(0,a.kt)("inlineCode",{parentName:"p"},"/src/images/defined/")," directory. You're welcome to make subdirectories within ",(0,a.kt)("inlineCode",{parentName:"p"},"defined/"),". The images you add here must have the ",(0,a.kt)("inlineCode",{parentName:"p"},"-2x")," suffix on their filenames. For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"/src/images/defined/banner-logo-2x.png"),". Note that the ",(0,a.kt)("inlineCode",{parentName:"p"},"-2x"),' suffix implies that the image is twice the size of its intended CSS dimensions. Don\'t worry about adding the single-pixel-density images ("1x"), as they will be automatically generated for use with devices/browsers that request them. If files are removed from this directory, corgi will pick up on that, and update the generated output accordingly.'),(0,a.kt)("h2",{id:"image-optimization-output-location"},"Image optimization output location"),(0,a.kt)("p",null,"Once the source images are in place, running any of the following Node scripts (per the ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," scripts) will optimize your source images. The ",(0,a.kt)("strong",{parentName:"p"},"output")," files will be saved to ",(0,a.kt)("inlineCode",{parentName:"p"},"/public/_images/"),". This directory is reserved for images optimized by corgi, so do not edit any of this directory's contents directly. Any changes to your images should ",(0,a.kt)("em",{parentName:"p"},"always")," be made from the source directory: ",(0,a.kt)("inlineCode",{parentName:"p"},"/src/images/defined/"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# When developing, all images in the `/src/images/defined/` directory will be watched for changes,\n# and generated and optimized on-the-fly:\nnpm start\n\n# When building for production, files will be generated and optimized based on the existing cache:\nnpm run build\n\n# Manually run the file generation and optimization, based on the existing cache file:\nnpm run mash-build\n\n# Manually run the file generation and optimization, creating a new cache file:\nnpm run mash-build-all\n")),(0,a.kt)("p",null,"Here's an example source file tree, and the output file tree below it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-txt",metastring:'title="Source image location"',title:'"Source',image:!0,'location"':!0},".\n\u2514\u2500\u2500 src/\n    \u2514\u2500\u2500 images/\n        \u2514\u2500\u2500 defined/\n            \u251c\u2500\u2500 banner-2x.jpg\n            \u2514\u2500\u2500 logo-2x.png\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-txt",metastring:'title="Output image location"',title:'"Output',image:!0,'location"':!0},".\n\u2514\u2500\u2500 public/\n    \u2514\u2500\u2500 _images/\n        \u251c\u2500\u2500 banner-2x.jpg\n        \u251c\u2500\u2500 banner.jpg\n        \u251c\u2500\u2500 logo-2x.png\n        \u251c\u2500\u2500 logo.png\n        \u251c\u2500\u2500 logo-2x.webp\n        \u2514\u2500\u2500 logo.webp\n")),(0,a.kt)("p",null,"As you can see in the example output above, not only are the 1x versions of the source files generated, but any ",(0,a.kt)("inlineCode",{parentName:"p"},".png")," images get ",(0,a.kt)("inlineCode",{parentName:"p"},".webp")," versions by default. And of course, all output files are compressed."),(0,a.kt)("h2",{id:"image-formats"},"Image formats"),(0,a.kt)("p",null,"corgi's image compression is intended for ",(0,a.kt)("inlineCode",{parentName:"p"},".jpg")," and ",(0,a.kt)("inlineCode",{parentName:"p"},".png")," files."),(0,a.kt)("p",null,"If you need static ",(0,a.kt)("inlineCode",{parentName:"p"},".svg"),", ",(0,a.kt)("inlineCode",{parentName:"p"},".mp4"),", or assets of other formats, add them to the default Next.js ",(0,a.kt)("inlineCode",{parentName:"p"},"/public/")," directory. Just remember not to tamper with the generated ",(0,a.kt)("inlineCode",{parentName:"p"},"/public/_images/")," directory within. More on this in the ",(0,a.kt)("a",{parentName:"p",href:"./static-assets"},"other static assets")," section."),(0,a.kt)("h2",{id:"image-usage"},"Image usage"),(0,a.kt)("p",null,"corgi provides a component for using the generated and optimized images. Check out the ",(0,a.kt)("a",{parentName:"p",href:"./picture-component"},(0,a.kt)("inlineCode",{parentName:"a"},"<Picture>")," component docs")," for more information."))}c.isMDXComponent=!0}}]);